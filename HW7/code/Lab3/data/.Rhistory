values = c("red", "brown", "green", "blue","purple")) +
ggtitle("Biotech. Stocks to Watch in 2016") +
theme(plot.title = element_text(lineheight=.7, face="bold"))
library(AnomalyDetection)
install.packages("AnomalyDetection")
data(raw_data)
res = AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
data()
library("AnomalyDetection"")
library("AnomalyDetection")
library(AnomalyDetection)
library("AnomalyDetection"")
)
""
library(AnomalyDetection)
install.packages("devtools")
devtools::install_github("twitter/AnomalyDetection")
library(AnomalyDetection)
data(raw_data)
res = AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
autoplot(res)
autoplot(res$plot)
res
data(raw_data)
res = AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', plot=TRUE)
res2 = AnomalyDetectionTs(fmri1[,2:5], max_anoms=0.02, direction='both', plot=TRUE)
fmri1
install.packages("weatherData")
data()
library(weatherData)
data()
w2013 <- getWeatherForYear("sfo",2013)
w2013 <- getWeatherForYear("new york",2013)
w2013 <- getWeatherForYear("KJFK",2013)
w2013 <- getWeatherForYear("KJFK",2015)
2013$shortdate <- strftime(w2013$Time, format="%m-%d")
w2013 <- getWeatherForYear("sfo",2013)
w2013$shortdate <- strftime(w2013$Time, format="%m-%d")
w2013$Time
(w2013
)
w2013
w2013 <- getWeatherForYear("sfo",2013)
w2013$shortdate <- strftime(w2013$Date, format="%m-%d")
meanTemp <- ddply(w2013, .(shortdate), summarize, mean_T=mean(TemperatureF))
meanTemp$shortdate <- as.Date(meanTemp$shortdate,format="%m-%d")
library(plyr)
meanTemp <- ddply(w2013, .(shortdate), summarize, mean_T=mean(TemperatureF))
autoplot(w2013)
autoplot(w2013$Min_TemperatureF)
plot(w2013$Min_TemperatureF)
plot(w2013$date, w2013$Min_TemperatureF)
ww2013
w2013
ggplot(w2013$Mean_TemperatureF, aes(w2013$shortdate, mean_T)) + geom_line() +
scale_x_date(labels=date_format("%m/%d")) + xlab("") + ylab("Mean Temp deg F") +
ggtitle("2013 Average Daily Temperature at SFO")
ggplot(w2013, aes(Date, Mean_TemperatureF)) + geom_line() +
scale_x_date(format = "%b-%Y") + xlab("") + ylab("Daily Views")
library(scales)
install.packages("scales")
meanTemp <- ddply(w2013, .(shortdate), summarize, mean_T=mean(TemperatureF))
w2013
w2013$shortdate <- as.Date(w2013$shortdate,format="%m-%d")
w2013
ggplot(w2013, aes(shortdate, Mean_TemperatureF)) + geom_line() +
scale_x_date(format = "%b-%Y") + xlab("") + ylab("Daily Views")
help(scale_x_date)
a<-as.ts(Mean_TemperatureF)
a<-as.ts(w2013$Mean_TemperatureF)
a
help(as.tx)
help(as.ts)
w2013
a<-ts(w2013$Mean_TemperatureF, start=c(2013,1,1), frequency=1)
a
autoplot(a)
a<-ts(w2013$Mean_TemperatureF, start=c(2013,1,1), end=c(2013,12,31) )
autoplot(a)
a
EQ5
flu
gas
install.packages("zoo")
Q.z <- zoo(w2013$Mean_TemperatureF, order.by=D)
window(Q.z, start = as.Date('2013-01-01'), end=as.Date('2013-31-12')
)
Q.z
b<-zoo(w2013$Mean_TemperatureF, start = as.Date('2013-01-01'), end=as.Date('2013-31-12'))
b<-ts(w2013$Mean_TemperatureF, start = as.Date('2013-01-01'), end=as.Date('2013-31-12'))
library(zoo)
help( xts)
library(xts)
install.packages("zoo")
library(xts)
help( xts)
data(sample_matrix)
sample_matrix
sample.xts <- as.xts(sample_matrix, descr='my new xts object')
sample.xt
sample.xts
class(sample.xts)
str(sample.xts)
sample.xts['2007']  # all of 2007
sample.xts['2007-03/']
install.packages("scales")
library(scales)
library(weatherData)
w2013 <- getWeatherForYear("sfo",2013)
w2013$Date <- as.Date(w2013$Date, format = "%d-%b-%y")
ggplot(data = 2013, x = Date) +
geom_line(aes(x = Date, y = Mean_TemperatureF, col = "G1T0"))
ggplot2(data = 2013, x = Date) +
geom_line(aes(x = Date, y = Mean_TemperatureF, col = "G1T0"))
library(ggplot2)
ggplot2(data = 2013, x = Date) +
geom_line(aes(x = Date, y = Mean_TemperatureF, col = "G1T0"))
ggplot(data = 2013, x = Date) +
geom_line(aes(x = Date, y = Mean_TemperatureF, col = "G1T0"))
w2013
class(w2013)
w2013$shortdate <- strftime(w2013$Time, format="%m-%d")
w2013$shortdate <- strftime(w2013$Date, format="%m-%d")
meanTemp <- ddply(w2013, .(shortdate), summarize, mean_T=mean(Mean_TemperatureF))
library(plyr)
meanTemp <- ddply(w2013, .(shortdate), summarize, mean_T=mean(TemperatureF))
meanTemp <- ddply(w2013, .(shortdate), summarize, mean_T=mean( Mean_TemperatureF))
meanTemp
meanTemp$shortdate <- as.Date(meanTemp$shortdate,format="%m-%d")
ggplot(meanTemp, aes(shortdate, mean_T)) + geom_line() +
scale_x_date(labels=date_format("%m/%d")) + xlab("") + ylab("Mean Temp deg F") +
ggtitle("2013 Average Daily Temperature at SFO")
ggplot(w2013, aes(shortdate,  Mean_TemperatureF)) + geom_line() +
scale_x_date(labels=date_format("%m/%d")) + xlab("") + ylab("Mean Temp deg F") +
ggtitle("2013 Average Daily Temperature at SFO")
ggplot(w2013, aes(shortdate,  Mean_TemperatureF)) + geom_line()
class(w2013)
class(meanTemp)
w2013$shortdate <- strftime(w2013$Time, format="%m-%d")
w2013 <- getWeatherForYear("sfo",2013)
w2013$shortdate <- strftime(w2013$Time, format="%m-%d")
w2013$Date <- as.Date(w2013$Date, format = "%y-%m-%d")
w2013$shortdate <- strftime(w2013$Time, format="%m-%d")
meanTemp <- ddply(w2013, .(shortdate), summarize, mean_T=mean(Mean_TemperatureF))
history
w2013$shortdate <- strftime(w2013$Date, format="%m-%d")
meanTemp <- ddply(w2013, .(shortdate), summarize, mean_T=mean(Mean_TemperatureF))
typeof(meanTemp)
typeof(w2013)
typeof(w2013$Date)
typeof(meanTemp$shortdate)
typeof(w2013$shortdate)
w2013
w2013$shortdate <- strftime(w2013$Date, format="%y-%m-%d")
w2013
meanTemp <- ddply(w2013, .(shortdate), summarize, mean_T=mean(Mean_TemperatureF))
meanTemp$shortdate <- as.Date(meanTemp$shortdate,format="%y-%m-%d")
ggplot(meanTemp, aes(shortdate, mean_T)) + geom_line() +
scale_x_date(labels=date_format("%y/%m/%d")) + xlab("") + ylab("Mean Temp deg F") +
ggtitle("2013 Average Daily Temperature at SFO")
ggplot(w2013, aes(shortdate, Mean_TemperatureF)) + geom_line() +
scale_x_date(labels=date_format("%y/%m/%d")) + xlab("") + ylab("Mean Temp deg F") +
ggtitle("2013 Average Daily Temperature at SFO")
class(w2013$shortdate)
class(meanTemp$shortdate)
w2013$$shortdate <- as.Date(w2013$shortdate,format="%y-%m-%d")
w2013$shortdate <- as.Date(w2013$shortdate,format="%y-%m-%d")
class(w2013$shortdate)
ggplot(w2013, aes(shortdate, Mean_TemperatureF)) + geom_line() +
scale_x_date(labels=date_format("%y/%m/%d")) + xlab("") + ylab("Mean Temp deg F") +
ggtitle("2013 Average Daily Temperature at SFO")
W_KJFK_2013 <- getWeatherForYear("KJFK",2013)
W_KJFK_2013$Date <- as.Date(w2013$Date,format="%y-%m-%d")
ggplot(W_KJFK_2013, aes(Date, Mean_TemperatureF)) + geom_line() +
scale_x_date(labels=date_format("%y/%m/%d")) + xlab("") + ylab("Mean Temp deg F") +
ggtitle("2013 Average Daily Temperature at SFO")
W_KJFK_2015 <- getWeatherForYear("KJFK",2015)
W_KJFK_2015$Date <- as.Date(w2015$Date,format="%y-%m-%d")
ggplot(W_KJFK_2015, aes(Date, Mean_TemperatureF)) + geom_line() +
scale_x_date(labels=date_format("%y/%m/%d")) + xlab("") + ylab("Mean Temp deg F") +
ggtitle("2015 Averaged Daily Temperature at JFK Airport")
W_KJFK_2015 <- getWeatherForYear("KJFK",2015)
W_KJFK_2015$Date <- as.Date(W_KJFK_2015$Date,format="%y-%m-%d")
ggplot(W_KJFK_2015, aes(Date, Mean_TemperatureF)) + geom_line() +
scale_x_date(labels=date_format("%y/%m/%d")) + xlab("") + ylab("Mean Temp deg F") +
ggtitle("2015 Averaged Daily Temperature at JFK Airport")
W_KJFK_2015<- getWeatherForDate("KJFK", "2012-01-01", end_date="2015-12-31")
W_KJFK_2015 <- getWeatherForYear("KJFK",2015)
W_KJFK_2015$Date <- as.Date(W_KJFK_2015$Date,format="%y-%m-%d")
ggplot(W_KJFK_2015, aes(Date, Mean_TemperatureF)) + geom_line() +
scale_x_date(labels=date_format("%y/%m/%d")) + xlab("") + ylab("Mean Temp deg F") +
ggtitle("2015 Averaged Daily Temperature at JFK Airport")
W_KJFK_2015<- getWeatherForDate("KJFK", "2012-01-01", end_date="2015-12-31")
W_KJFK_2015$Date <- as.Date(W_KJFK_2015$Date,format="%y-%m-%d")
ggplot(W_KJFK_2015, aes(Date, Mean_TemperatureF)) + geom_line() +
scale_x_date(labels=date_format("%y/%m/%d")) + xlab("") + ylab("Mean Temp deg F") +
ggtitle("2015 Averaged Daily Temperature at JFK Airport")
W_KJFK_2015<- getWeatherForDate("KJFK", "2012-01-01", end_date="2015-12-31")
W_KJFK_2015
W_KJFK_2015<- getWeatherForDate("KJFK", "2012-01-01", end_date="2015-12-31")
dim(
W_KJFK_2015)
W_KJFK_2015<- getWeatherForDate("KJFK", "2014-01-01", end_date="2015-12-31")
help(getWeatherForDate)
W_KJFK_2015<- getWeatherForDate("KJFK")
W_KJFK_2015<- getWeatherForDate("KJFK", "2014-01-01")
W_KJFK_2015<- getWeatherForDate("KJFK", start_date="2014-01-01", end_date="2015-12-31")
W_KJFK_2015
w=rnorm(1000,0)
hist(w)
help(rnorm)
w=rnorm(1000,0,1)
z <- w
# We are going to construct a simulated AR(1) model manually instead of
# using built-in function from R
for (t in 2:length(w)){
z[t] <- 0.9*z[t-1] + w[t] # use the same random normal sequence generated above
}
y <- w
# We are going to construct a simulated AR(1) model manually instead of
# using built-in function from R
for (t in 2:length(w)){
y[t] <- 0.2*y[t-1] + w[t] # use the same random normal sequence generated above
}
hist(z, breaks="FD",
main="AR(ar=c(0.9))",
xlab="Values of a Simluated Zero-Mean AR(1) Series",
col="blue", labels=TRUE)
plot.ts(z, main="Simulated AR(ar=c(0.9)) Series", col="navy",
ylab="Values of the Simluated Series",
xlab="Simulated Time Period")
plot.ts(y, main="Simulated AR(ar=c(0.2)) Series", col="navy",
ylab="Values of the Simluated Series",
xlab="Simulated Time Period")
hist(y, breaks="FD",
main="AR(ar=c(0.2))",
xlab="Values of a Simluated Zero-Mean AR(1) Series",
col="blue", labels=TRUE)
install.packages("cowplot")
head(gw,10)
setwd("C:/Users/songminghu/Documents/GitHub/W271/Lab3/data")
gw <- read.csv("globalWarming.csv")
head(gw,10)
tail(gw,10)
gw
par(mfrow=c(2 2))
par(mfrow=c(2,2))
plot(gw_ts, xlab = "Time",
ylab = " The Interested Level",
main = paste0(" The Level of Interest in Global Warming News\nfrom Jan. ",
"2004 to Feb. 2016"))
acf(gw_ts, title= 'ACF of Interest level in Global Warming')
pacf(gw_ts, title= 'ACF of Interest level in Global Warming')
gw_ts <- ts(gw[,2], start = 2004 + 4/265.25, frequency = 365.25/7)
plot(gw_ts, xlab = "Time",
ylab = " The Interested Level",
main = paste0(" The Level of Interest in Global Warming News\nfrom Jan. ",
"2004 to Feb. 2016"))
acf(gw_ts, title= 'ACF of Interest level in Global Warming')
pacf(gw_ts, title= 'ACF of Interest level in Global Warming')
hist(gw_ts_new)
hist(gw_ts_new)
gw_ts_new <-window(gw_ts, start = c(2013,1) )
hist(gw_ts_new)
plot(diff(gw_ts),ylab=”Differenced Interest Level in Global Warming” )
plot(diff(gw_ts),ylab= 'Differenced Interest Level in Global Warming' )
gw_ts_new <-window(gw_ts, start = c(2012,1) )
par(mfrow=c(2,2))
plot(gw_ts_new, xlab = "Time",
ylab = " The Interested Level",
main = paste0(" The Level of Interest in Global Warming News\nfrom Jan. ",
"2012 to Feb. 2016"))
plot(diff(gw_ts),ylab= 'Differenced Interest Level in Global Warming' )
acf(diff(gw_ts), title= 'ACF of Interest level in Global Warming')
pacf(diff(gw_ts), title= 'ACF of Interest level in Global Warming')
par(mfrow=c(2,2))
plot(gw_ts_new, xlab = "Time",
ylab = " The Interested Level",
main = paste0(" The Level of Interest in Global Warming News\nfrom Jan. ",
"2012 to Feb. 2016"))
plot(diff(gw_ts_new),ylab= 'Differenced Interest Level in Global Warming' )
acf(diff(gw_ts_new), title= 'ACF of Interest level in Global Warming')
pacf(diff(gw_ts), title= 'ACF of Interest level in Global Warming')
plot(log10(diff(gw_ts_new)),ylab= 'Differenced Interest Levels' )
gw_ts_fit <- auto.arima(gw_ts_new)
forecast.Arima(gw_ts_fit, h = 12)
library(forecast)
gw_ts_fit <- auto.arima(gw_ts_new)
forecast.Arima(gw_ts_fit, h = 12)
forecast.Arima(gw_ts_fit, h = 12)
plot(forecast(fit,h=12))
plot(forecast(gw_ts_fit,h=12))
device.off
device(off)
gw_ts_fit
dev.off
plot(forecast(gw_ts_fit,h=12))
gw_ts_fit
predict(gw_ts_fit)
line(predict(gw_ts_fit))
plot(gw_ts_new, col="navy")
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="navy")
lines(fitted(gw_ts_fit,col="blue")
gw_ts_fit.fcast<-forecast.Arima(fit, h = 12)
gw_ts_fit.fcast<-forecast.Arima(fit, h = 12)
gw_ts_fit.fcast<-forecast.Arima(gw_ts_fit, h = 12)
gw_ts_fit.fcast<-forecast.Arima(gw_ts_fit, h = 12)
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="navy")
lines(fitted(gw_ts_fit,col="blue")
)
gw_ts_fit.fcast<-forecast.Arima(gw_ts_fit, h = 12)
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="navy")
lines(fitted(gw_ts_fit,col="blue")
lines(gw_ts, col='black')
gw_ts_fit.fcast<-forecast.Arima(gw_ts_fit, h = 12)
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="navy")
lines(fitted(gw_ts_fit,col="blue") )
lines(gw_ts, col='black')
gw_ts_fit.fcast<-forecast.Arima(gw_ts_fit, h = 12)
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="navy")
lines(fitted(gw_ts_fit,col="blue") )
gw_ts_fit.fcast<-forecast.Arima(gw_ts_fit, h = 12)
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="navy")
lines(fitted(gw_ts_fit,col="blue") )
gw_ts_fit.fcast<-forecast.Arima(gw_ts_fit, h = 12)
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="navy")
lines(fitted(gw_ts_fit,col="blue") )
gw_ts_fit.fcast
fitted(gw_ts_fit)
gw_ts_fit.fcast<-forecast.Arima(gw_ts_fit, h = 12)
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="navy")
fitted(gw_ts_fit)
gw_ts_fit.fcast
gw_ts_fit.fcast<-forecast.Arima(gw_ts_fit, h = 12)
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="navy")
lines(fitted(gw_ts_fit,col="blue") )
gw_ts_fit.fcast<-forecast.Arima(gw_ts_fit, h = 12)
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="navy")
gw_ts_fit.fcast<-forecast.Arima(gw_ts_fit, h = 12)
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="red")
lines(fitted(gw_ts_fit,col="blue") )
gw_ts_fit.fcast<-forecast.Arima(gw_ts_fit, h = 12)
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="navy")
lines(fitted(gw_ts_fit,col="red") )
lines(fitted(gw_ts_fit,col="red") )
lines(fitted(gw_ts_fit),col="red" )
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="navy")
lines(fitted(gw_ts_fit),col="red" )
leg.txt <- c("Original Series", "Estimated Series")
legend("topright", legend=leg.txt, lty=c(2,1),
col=c("navy","red"), bty='n', cex=1)
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="navy")
lines(fitted(gw_ts_fit),col="red" )
leg.txt <- c("Original Series", "Estimated Series")
legend("topleft", legend=leg.txt, lty=c(2,1),
col=c("navy","red"), bty='n', cex=1)
gw_ts_fit
gw_ts_fit <- auto.arima(gw_ts_new)
gw_ts_fit.fcast<-forecast.Arima(gw_ts_fit, h = 12)
gw_ts_fit <- auto.arima(gw_ts_new)
gw_ts_fit.fcast<-forecast.Arima(gw_ts_fit, h = 12)
gw_ts_fit
gw_ts_fit.fcast
plot(gw_ts_fit.fcast, main="12-Step Ahead Forecast and Original & Estimated Series",
xlab="Simulated Time Period", ylab="Original, Estimated, and Forecasted Values",
xlim=c(), lty=2, col="navy")
lines(fitted(gw_ts_fit),col="red" )
leg.txt <- c("Original Series", "Estimated Series")
legend("topleft", legend=leg.txt, lty=c(2,1),
col=c("navy","red"), bty='n', cex=1)
residuals(gw_ts_fit )
Box.test(residuals(gw_ts_fit), type="Ljung")
Acf(residuals(gw_ts_fit))
pacf(residuals(gw_ts_fit))
pacf(residuals(gw_ts_fit)^2)
acf(residuals(gw_ts_fit)^2)
get.best.arima <- function(x.ts, maxord = c(1,1,1))  # don't change any of this code
{
best.aic <- 1e8
n <- length(x.ts)
for (p in 0:maxord[1]) for(d in 0:maxord[2]) for(q in 0:maxord[3])
{
fit <- arima(x.ts, order = c(p,d,q))
fit.aic <- -2 * fit$loglik + (log(n) + 1) * length(fit$coef)
if (fit.aic < best.aic)
{
best.aic <- fit.aic
best.fit <- fit
best.model <- c(p,d,q)
}
}
list(best.aic, best.fit, best.model)
}
gw_ts_new.best = get.best.arima(gw_ts_new, maxord = rep(2,6))
arima212<- arima(gw_ts_new, order=c(2,1,2))
summary(arima(212))
summary(arima212)
acf(residuals(arima212) )
pacf(residuals(arima212) )
gw_ts_fit
arima010<- arima(gw_ts_new, order=c(0,1,0))
summary(arima010)
arima110<- arima(gw_ts_new, order=c(1,1,0))
summary(arima110)
arima011<- arima(gw_ts_new, order=c(0,1,1))
arima111<- arima(gw_ts_new, order=c(1,1,1))
arima012<- arima(gw_ts_new, order=c(0,1,2))
arima112<- arima(gw_ts_new, order=c(1,1,2))
arima210<- arima(gw_ts_new, order=c(2,1,0))
arima212<- arima(gw_ts_new, order=c(2,1,2))
summary(arima011)
arima011$aic
arima111$aic
arima112$aic
arima012$aic
arima210$aic
arima212$aic
aic_values <- c(arima010$aic, arima110$aic, arima011$aic, arima111$aic, arima012$aic, arima012$aic,
arima112$aic, arima210$aic, arima212$aic)
aic_values
help(ktable)
lapply(aic_values, function(x) x[which.max(abs(x))])
max(aic_values)
min(aic_values)
par(mfrow=c(2,1))
acf(residuals(arima212), main='ACF of Residual', ylim=c(-0.2,1))
pacf(residuals(arima212),main='PACF of Residual',ylim=c(-0.2,1))
invisible(dev.off())
par(mfrow=c(2,1))
acf(residuals(arima212), main='ACF of Residual', ylim=c(-0.2,1))
pacf(residuals(arima212),main='PACF of Residual',ylim=c(-0.2,1))
par(mfrow=c(2,2))
acf(residuals(arima212), main='ACF of Residual from arima212', ylim=c(-0.2,1))
pacf(residuals(arima212),main='PACF of Residual from arima212',ylim=c(-0.2,1))
acf(residuals(arima212)^2, main='ACF of Residual from arima212', ylim=c(-0.2,1))
pacf(residuals(arima212)^2,main='PACF of Residual from arima212',ylim=c(-0.2,1))
gw_ts_bestaic.fcast<-forecast.Arima(arima212, h = 12)
plot(gw_ts_bestaic.fcast,
main="12-Step Ahead Forecast by the Best AIC Model",
xlab="Time",
ylab="Original, Estimated, and Forecasted Values",
xlim=c(0,46),ylim=c(2.0,4.0), lty=2,lwd=1.5)
par(new=T)
plot.ts(fitted(arima212),col="blue",
lty=2, lwd=2, xlab="",ylab="",xlim=c(0,46),ylim=c(2.0,4.0))
leg.txt <- c("Original Series", "Estimated Series", "Forecast")
legend("topleft", legend=leg.txt, lty=c(2,2,1), lwd=c(1,2,2),
col=c("black","blue","blue"), bty='n', cex=1)
invisible(dev.off())
gw_ts_bestaic.fcast<-forecast.Arima(arima212, h = 12)
plot(gw_ts_bestaic.fcast,
main="12-Step Ahead Forecast by the Best AIC Model",
xlab="Time",
ylab="Original, Estimated, and Forecasted Values",
xlim=c(0,46),ylim=c(2.0,4.0), lty=2,lwd=1.5)
par(new=T)
plot.ts(fitted(arima212),col="blue",
lty=2, lwd=2, xlab="",ylab="",xlim=c(0,46),ylim=c(2.0,4.0))
leg.txt <- c("Original Series", "Estimated Series", "Forecast")
legend("topleft", legend=leg.txt, lty=c(2,2,1), lwd=c(1,2,2),
col=c("black","blue","blue"), bty='n', cex=1)
gw_ts_bestaic.fcast<-forecast.Arima(arima212, h = 12)
plot(gw_ts_bestaic.fcast, main="12-Step Ahead Forecast by the Best-AIC Model",
xlab="Time", xlim=c(), lty=2, col="navy")
lines(fitted(arima212),col="red" )
leg.txt <- c("Original Series", "Estimated Series")
legend("topleft", legend=leg.txt, lty=c(2,1),
col=c("navy","red"), bty='n', cex=1)
plot(decompose(gw_ts_new))
plot(decompose(gw_ts_new), main = "Decomposition of Global Warming Time Sereies")
plot(decompose(gw_ts), main = "Decomposition of Global Warming Time Sereies")
plot(decompose(gw_ts))
gw
plot(decompose(gw_ts), main = 'Decomposition of Global Warming Time Sereies')
plot(decompose(gw_ts))
plot(decompose(gw_ts)),main = 'Decomposition of Global Warming Time Sereies')
plot(decompose(gw_ts),main = 'Decomposition of Global Warming Time Sereies')
plot(decompose(gw_ts) )
plot(decompose(gw_ts),main = 'Trend and Seasonal Decomposition')
plot(decompose(gw_ts),title = 'Decomposition of Global Warming Time Sereies')
ts.plot(ts(residuals(arima212)))
ts.plot(ts(log10(residuals(arima212))))
