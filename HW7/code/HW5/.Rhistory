384498 – 34961 – 4362
384498- 34961 - 4362
:    34961 + 4362
:    34961 + 4362
34961 + 4362
6. **Calculate the power of this test, again assuming the "true" population proportion is $\theta^*= 0.45$.**
library(rmarkdown)
render("Lab1_song.Rmd")
pwd
install.packages("plot3D")
install.packages("TeX")
install.packages("MiKTeX")
Sys.getenv("PATH")
cd C:
cd C
getwd()
cd C:/Users/songminghu
library(car)
setwd("C:/Users/songminghu/UCB_DataScience/W271_ApplyRegressionTimeSeriesAnalysis/data")
getwd()
library(car)
library(AER)
library(sandwich)
library(ivpack) # use ivpack to get robust standard errors for IV regression
library(stargazer) # use stargazer for professional regression tables
library(foreign)
Q_full = read.dta("QOB_full.dta")
names(Q_full)
Q = Q_full[, c(1,2,4,5,6,9,10,11,12,13,16,18,19,20,21,24,25,27)]
names(Q) = c("age", "ageq", "educ", "enocent", "esocent", "lwklywge",
"married", "midatl", "mt", "neweng", "census", "qob",
"race", "smsa", "soatl", "wnocent", "wsocent", "yob")
Q30 = Q[Q$yob2 > 29 & Q$yob2 < 40,]
summary(Q30)
nrow(Q30)
ols_model0 = lm(lwklywge ~ educ, data = Q30)
Q30 = Q[Q$yob2 > 29 & Q$yob2 < 40,]
summary(Q30)
nrow(Q30)
Q30 = Q[Q$yob2 > 29 & Q$yob2 < 40,]
summary(Q30)
summary(Q)
summary(Q$yob)
hist(Q$yob)
Q$yob2 = Q$yob %% 100
hist(Q$yob2)
summary(Q$ageq)
hist(Q$ageq)
Q$ageq2= Q$ageq %% 100
summary(Q$ageq2)
Q30 = Q[Q$yob2 > 29 & Q$yob2 < 40,]
summary(Q30)
nrow(Q30)
help(robust.se)
help(ivreg)
ols_model1 = lm(lwklywge ~ educ + factor(yob2), data = Q30)
se_ols1 = robust.se(ols_model1)[,2]
# OLS with age covariates
ols_model2 = lm(lwklywge ~ educ + factor(yob2) + ageq2 + I(ageq2**2), data = Q30)
se_ols2 = robust.se(ols_model2)[,2]
# OLS with race, city size, married, and region dummies
ols_model3 = lm(lwklywge ~ educ + factor(yob2) + race + married + smsa + neweng
+ midatl + enocent + wnocent + soatl +esocent + wsocent
+ mt, data = Q30)
se_ols3 = robust.se(ols_model3)[,2]
# OLS with all covariates
ols_model4 = lm(lwklywge ~ educ + factor(yob2) + race + married + smsa + neweng
+ midatl + enocent + wnocent + soatl +esocent + wsocent
+ mt + ageq2 + I(ageq2**2), data = Q30)
se_ols4 = robust.se(ols_model4)[,2]
se_tsls0 = robust.se(tsls_model0)
se_tsls0
tsls_model0 = ivreg(lwklywge ~ educ | factor(qob), data = Q30)
se_tsls0 = robust.se(tsls_model0)
se_tsls0
tsls_model1 = ivreg(lwklywge ~ educ + factor(yob2) | factor(yob2) * factor(qob), data = Q30)
se_tsls1 = robust.se(tsls_model1)[,2]
se_tsls1
se_tsls0 = robust.se(tsls_model0)
se_tsls0
# Notice that we can pull our the second column to get just the numeric
# vector of standard errors.  This will be useful to pass into stargazer
# for output.
se_tsls0[,2]
##### Alternate Model Specifications
# In this section, we recreate table V from Angrist and Krueger (1991)
# We include several OLS and several TSLS specifications, including
# different sets of covariates in each one.
# OLS model with year-of-birth dummies
ols_model1 = lm(lwklywge ~ educ + factor(yob2), data = Q30)
se_ols1 = robust.se(ols_model1)[,2]
# OLS with age covariates
ols_model2 = lm(lwklywge ~ educ + factor(yob2) + ageq2 + I(ageq2**2), data = Q30)
se_ols2 = robust.se(ols_model2)[,2]
# OLS with race, city size, married, and region dummies
ols_model3 = lm(lwklywge ~ educ + factor(yob2) + race + married + smsa + neweng
+ midatl + enocent + wnocent + soatl +esocent + wsocent
+ mt, data = Q30)
se_ols3 = robust.se(ols_model3)[,2]
# OLS with all covariates
ols_model4 = lm(lwklywge ~ educ + factor(yob2) + race + married + smsa + neweng
+ midatl + enocent + wnocent + soatl +esocent + wsocent
+ mt + ageq2 + I(ageq2**2), data = Q30)
se_ols4 = robust.se(ols_model4)[,2]
# TSLS regression
tsls_model1 = ivreg(lwklywge ~ educ + factor(yob2) | factor(yob2) * factor(qob), data = Q30)
se_tsls1 = robust.se(tsls_model1)[,2]
# TSLS with age covariates
tsls_model2 = ivreg(lwklywge ~ educ + factor(yob2) + ageq2 + I(ageq2**2) | factor(yob2) * factor(qob) + ageq2 + I(ageq2**2), data = Q30)
se_tsls2 = robust.se(tsls_model2)[,2]
# TSLS with race, city size, married, and region dummies
tsls_model3 = ivreg(lwklywge ~ educ + factor(yob2) +  race + married + smsa + neweng
+ midatl + enocent + wnocent + soatl +esocent + wsocent
+ mt| factor(yob2) * factor(qob) + race + married + smsa + neweng
+ midatl + enocent + wnocent + soatl +esocent + wsocent
+ mt, data = Q30)
se_tsls3 = robust.se(tsls_model3)[,2]
# TSLS with all covariates
tsls_model4 = ivreg(lwklywge ~ educ + factor(yob2) +  race + married + smsa + neweng
+ midatl + enocent + wnocent + soatl +esocent + wsocent
+ mt + ageq2 + I(ageq2**2) | factor(yob2) * factor(qob)
+ race + married + smsa + neweng + midatl + enocent
+ wnocent + soatl +esocent + wsocent + mt + ageq2
+ I(ageq2**2), data = Q30)
se_tsls4 = robust.se(tsls_model4)[,2]
stargazer(ols_model1, tsls_model1, ols_model2, tsls_model2,
ols_model3, tsls_model3, ols_model4, tsls_model4,
se = list(se_ols1, se_tsls1, se_ols2, se_tsls2,
se_ols3, se_tsls3, se_ols4, se_tsls4),
covariate.labels=c("education", "age", "age squared", "race (1 = black)",
"married", "smsa (1 = city center)"),
dep.var.labels = "Log Weekly Wage",
omit = c("factor(yob2)*","neweng|midatl|enocent|wnocent|soatl|esocent|wsocent|mt"),
out = "QOB_table.htm", df= F,
omit.labels = c("9 year-of-birth dummies", "8 region-of-residence dummies"))
stargazer(type ="text", ols_model1, tsls_model1, ols_model2, tsls_model2,
ols_model3, tsls_model3, ols_model4, tsls_model4,
se = list(se_ols1, se_tsls1, se_ols2, se_tsls2,
se_ols3, se_tsls3, se_ols4, se_tsls4),
covariate.labels=c("education", "age", "age squared", "race (1 = black)",
"married", "smsa (1 = city center)"),
dep.var.labels = "Log Weekly Wage",
omit = c("factor(yob2)*","neweng|midatl|enocent|wnocent|soatl|esocent|wsocent|mt"),
out = "QOB_table.htm", df= F,
omit.labels = c("9 year-of-birth dummies", "8 region-of-residence dummies"))
stargazer(type ="html", ols_model1, tsls_model1, ols_model2, tsls_model2,
ols_model3, tsls_model3, ols_model4, tsls_model4,
se = list(se_ols1, se_tsls1, se_ols2, se_tsls2,
se_ols3, se_tsls3, se_ols4, se_tsls4),
covariate.labels=c("education", "age", "age squared", "race (1 = black)",
"married", "smsa (1 = city center)"),
dep.var.labels = "Log Weekly Wage",
omit = c("factor(yob2)*","neweng|midatl|enocent|wnocent|soatl|esocent|wsocent|mt"),
out = "QOB_table.htm", df= F,
omit.labels = c("9 year-of-birth dummies", "8 region-of-residence dummies"))
setwd(C:/Users/songminghu/Documents/GitHub/W271/HW5)
setwd("C:/Users/songminghu/Documents/GitHub/W271/HW5")
rand_draw <- rnorm(1000)
rand_draw
w<-rand_draw
# Random walk with zero drift
x=cumsum(w)
# Random walk with drift = 0.2
wd = 0.2 + w;
xd = cumsum(wd)
# Check out the numbers to see if they make sense
head(cbind(w,x,wd,xd),20)
# Set graphic parameters
#GRAPH_BLUE<-rgb(43/255, 71/255,153/255)
#par(bg="grey95") # Background color for the plot
plot.ts(xd, main="Random Walk with Drift, Random Walk without Drift, Deterministic Trend",
col="blue", ylab="Values", xlab="Simulated Time Period", bg=38)
lines(0.2*(1:length(xd)), lty="dashed", col="navy")
lines(x, col="purple")
# Add vertical lines
abline(v=c(100,200,300,400),col=3,lty=3)
# Add Legend
leg.txt <- c("RW with Drift", "Deterministic Linear Trend", "RW without Drift")
legend("topleft", legend=leg.txt, lty=c(1,2,1), col=c("blue","navy","purple"),
bty='n', cex=1, merge = TRUE, bg=336)
for (t in 1:1000) {
model1 = 10  + 0.5 * t
}
model1
for (t in 1:1000) {
model1[t] = 10  + 0.5 * t
}
model1
plot(model1)
plot(model1, xlim=c(0,20))
plot(model1, xlim=c(0,50))
plot(model1, xlim=c(0,50),ylim=c(0,50))
rw=cumsum(rand_draw)
# Generate a Random walk with drift = 0.2
rand_walk = 0.5 + rand_draw;
rw_d = cumsum(rand_walk)
head(cbind(rand_draw,model1,rw,rw_d),30)
plot.ts(rw_d, main="Random Walk with Drift, Random Walk without Drift, Deterministic Trend",
col="blue", ylab="Values", xlab="Simulated Time Period", bg=38)
lines(0.5*(1:length(xd)+10), lty="dashed", col="navy")
lines(rw, col="purple")
# Add vertical lines
abline(v=c(100,200,300,400),col=3,lty=3)
# Add Legend
leg.txt <- c("RW with Drift", "Deterministic Linear Trend", "RW without Drift")
legend("topleft", legend=leg.txt, lty=c(1,2,1), col=c("blue","navy","purple"),
bty='n', cex=1, merge = TRUE, bg=336)
autoplot(rw_d, main="Random Walk with Drift, Random Walk without Drift, Deterministic Trend",
col="blue", ylab="Values", xlab="Simulated Time Period", bg=38)
library(e1071)
library(ggplot2)
library(ggfortify)
library(scales)
library(knitr)
library(pastecs)
library(car)
library(sandwich)
library(lmtest)
library(dplyr)
library(stargazer)
library(texreg)
library(xts)
library(weatherData)
library(scales)
autoplot(rw_d, main="Random Walk with Drift, Random Walk without Drift, Deterministic Trend",
col="blue", ylab="Values", xlab="Simulated Time Period", bg=38)
autoplot(rw_d)
rw_d <- ts(rw_d)
autoplot(rw_d)
autoplot(rw_d , main="Random Walk with Drift, Random Walk without Drift, Deterministic Trend",
xlab = "Simulated Time Period", ylab = "Simulated Values", bg=38,
ts.colour = 'dodgerblue2')
model1_1 <- ts(model1)
autoplot(model1_1, geom = "line", ts.colour = 'red )
)
)
''
'
autoplot(model1_1, geom = "line", ts.colour = 'red')
autoplot(c(rw_d,model1_1) , main="Random Walk with Drift, Random Walk without Drift, Deterministic Trend",
xlab = "Simulated Time Period", ylab = "Simulated Values",
ts.colour = c('dodgerblue2','red'))
autoplot(cbind(rw_d,model1_1)  )
CBE <- read.table("http://library.quantlego.com/Howto/R/cbe.dat")
# Check the data
str(CBE)
dim(CBE)
head(CBE, 10)
summary(CBE)
# Create time series object for the three variables in the data set
# Convert numeric vectors into R time series objects
Elec.ts <- ts(CBE[,3], start=1958, freq=12)
Beer.ts <- ts(CBE[,2], start=1958, freq=12)
Choc.ts <- ts(CBE[,1], start=1958, freq=12)
# Examine the Series Before Performing Any Other Operations
par(mfrow=c(1,1))
plot(cbind(Elec.ts, Beer.ts, Choc.ts), col="navy",
main="Australian Chocolate, Beer, and Electricity Production
(Jan 1958 - Dec 1990)", xlab="Year")
p1<- autoplot(rw_d , main="Random Walk with Drift, Random Walk without Drift, Deterministic Trend",
xlab = "Simulated Time Period", ylab = "Simulated Values", bg=38,
ts.colour = 'dodgerblue2')
p1$plot+geom_line(data=model1_1)
autoplot(rw_d, model1_1)
model1_1
rw_d
autoplot(rw_d, model1_1)
autoplot(rw_d)
ts.plot(rw_d, model1_1)
library(zoo)
df <- data.frame(date=as.Date(as.yearqtr(time(rw_d))), Y=as.matrix(rw_d))
ggplot(data=df, mapping=aes(x=date, y=Y))+geom_point()
ggplot(data=df, mapping=aes(x=date, y=Y))
ggplot(data=df, mapping=aes(x=date, y=Y))+geom_line()
ggplot(data=df, mapping=aes(x=date, y=Y))+geom_point()
rand_draw <- rnorm(1000) # 1000 random draw
# Generate a deterministic linear series
for (t in 1:1000) {
mod1[t] = 10  + 0.5 * t
}
mod1 <-ts(mod1)
mod1 <- data.frame(date=as.Date(as.yearqtr(time(mod1))), val=as.matrix(mod1) )
for (t in 1:1000) {
model1[t] = 10  + 0.5 * t
}
for (t in 1:1000) {
model2[t] = 10  + 0.5 * t
}
help(seq)
seq(1, 10)
seq(1, 1000) * 0.5 +10
mod1 <- seq(1, 1000) * 0.5 + 10
mod1 <-ts(mod1)
mod1 <- data.frame(date=as.Date(as.yearqtr(time(mod1))), val=as.matrix(mod1) )
ggplot(data=mod1, mapping=aes(x=date, y=val))+geom_point()
rand_walk=cumsum(rand_draw)
rand_walk
rand_walk=cumsum(rand_draw)
rand_walk=ts(rand_walk)
mod2 <- data.frame(date=as.Date(as.yearqtr(time(rand_walk))), val=as.matrix(rand_walk) )
ggplot(data=mod2, mapping=aes(x=date, y=val))+geom_point()
ggplot(data=mod2, mapping=aes(x=date, y=val))+geom_line()
plot.ts(rand_walk)
rand_walk=cumsum(rand_draw)
plot(rand_walk)
rand_draw <- rnorm(1000) # 1000 random draw
# Generate a deterministic linear series
mod1 <- seq(1, 1000) * 0.5 + 10
mod1 <-ts(mod1)
mod1 <- data.frame(date=as.Date(as.yearqtr(time(mod1))), val=as.matrix(mod1) )
#ggplot(data=mod1, mapping=aes(x=date, y=val))+geom_point()
# Generate a random walk without drift
randwalk=cumsum(rand_draw)
randwalk=ts(randwalk)
mod2 <- data.frame(date=as.Date(as.yearqtr(time(randwalk))), val=as.matrix(randwalk) )
#ggplot(data=mod2, mapping=aes(x=date, y=val))+geom_point()
# Generate a Random walk with drift = 0.2
randwalk_d = 0.5 + rand_draw;
randwalk_d = cumsum(randwalk_d)
mod3 <- data.frame(date=as.Date(as.yearqtr(time(randwalk_d))), val=as.matrix(randwalk_d) )
#mod1 <- data.frame(date=as.Date(as.yearqtr(time(rw_d))), val=as.matrix(rw_d))
#ggplot(data=df, mapping=aes(x=date, y=val))+geom_point()
ggplot(mod1,aes(date,val)) +
geom_line(aes(color="mod1")) +
geom_line(data=mod2,aes(color="mod2")) +
geom_line(data=lmod3,aes(color="mod3")) +
labs(color="Legend") +
scale_colour_manual("", breaks = c("mod1", "mod2","mod3"),
values = c("red", "brown", "green", "blue")) +
ggtitle("Random Walk with Drift, Random Walk without Drift, Deterministic Trend") +
theme(plot.title = element_text(lineheight=.7, face="bold")) +
labs(y = "Simulated Values from Three Models ")
ggplot(mod1,aes(date,val)) +
geom_line(aes(color="mod1")) +
geom_line(data=mod2,aes(color="mod2")) +
geom_line(data=mod3,aes(color="mod3")) +
labs(color="Legend") +
scale_colour_manual("", breaks = c("mod1", "mod2","mod3"),
values = c("red", "brown", "green", "blue")) +
ggtitle("Random Walk with Drift, Random Walk without Drift, Deterministic Trend") +
theme(plot.title = element_text(lineheight=.7, face="bold")) +
labs(y = "Simulated Values from Three Models ")
ggplot(mod1,aes(date,val)) +
geom_line(aes(color="deterministic model")) +
geom_line(data=mod2,aes(color="random walk")) +
geom_line(data=mod3,aes(color="mod3")) +
labs(color="Legend") +
scale_colour_manual("", breaks = c("deterministic model", "random walk","mod3"),
values = c("red", "brown", "green", "blue")) +
ggtitle("Random Walk with Drift, Random Walk without Drift, Deterministic Trend") +
theme(plot.title = element_text(lineheight=.7, face="bold")) +
labs(y = "Simulated Values from Three Models ")
ggplot(mod1,aes(date,val)) +
geom_point(aes(color="deterministic model")) +
geom_point(data=mod2,aes(color="random walk")) +
geom_point(data=mod3,aes(color="mod3")) +
labs(color="Legend") +
scale_colour_manual("", breaks = c("deterministic model", "random walk","mod3"),
values = c("red", "brown", "green", "blue")) +
ggtitle("Random Walk with Drift, Random Walk without Drift, Deterministic Trend") +
theme(plot.title = element_text(lineheight=.7, face="bold")) +
labs(y = "Simulated Values from Three Models ")
ggplot(mod1,aes(date,val)) +
geom_point(aes(color="deterministic model")) +
geom_point(data=mod2,aes(color="random walk without drift")) +
geom_point(data=mod3,aes(color="Random walk with drift=0.5")) +
labs(color="Legend") +
scale_colour_manual("", breaks = c("deterministic model", "random walk without drift","Random walk with drift=0.5"),
values = c("black", "blue", "red")) +
ggtitle("Random Walk with Drift, Random Walk without Drift, Deterministic Trend") +
theme(plot.title = element_text(lineheight=.7, face="bold")) +
labs(y = "Simulated Values from Three Models ")
# Generate a deterministic linear series
mod1 <- seq(1, 1000) * 0.5 + 10
mod1 <-ts(mod1)
mod1 <- data.frame(date=as.Date(as.yearqtr(time(mod1))), val=as.matrix(mod1) )
#ggplot(data=mod1, mapping=aes(x=date, y=val))+geom_point()
# Generate a random walk without drift
randwalk=cumsum(rand_draw)
randwalk=ts(randwalk)
mod2 <- data.frame(date=as.Date(as.yearqtr(time(randwalk))), val=as.matrix(randwalk) )
#ggplot(data=mod2, mapping=aes(x=date, y=val))+geom_point()
# Generate a Random walk with drift = 0.5
randwalk_d = 0.5 + rand_draw;
randwalk_d = cumsum(randwalk_d)
mod3 <- data.frame(date=as.Date(as.yearqtr(time(randwalk_d))), val=as.matrix(randwalk_d) )
#mod1 <- data.frame(date=as.Date(as.yearqtr(time(rw_d))), val=as.matrix(rw_d))
#ggplot(data=df, mapping=aes(x=date, y=val))+geom_point()
ggplot(mod1,aes(date,val)) +
geom_point(aes(color="deterministic trend")) +
geom_point(data=mod2,aes(color="random walk without drift")) +
geom_point(data=mod3,aes(color="Random walk with drift=0.5")) +
labs(color="Legend") +
scale_colour_manual("", breaks = c("deterministic trend", "random walk without drift","Random walk with drift=0.5"),
values = c("black", "blue", "red")) +
ggtitle("Random Walk with Drift, Random Walk without Drift, Deterministic Trend") +
theme(plot.title = element_text(lineheight=.7, face="bold")) +
labs(y = "Simulated Values from Three Models ")
mod1
mod1 <- seq(1, 1000) * 0.5 + 10
mod1 <-ts(mod1)
time(mod1)
as.integer(time(mod1)
)
mod1 <- data.frame(time=as.integer( (time(mod1) ), val=as.matrix(mod1) )
)
mod1 <- data.frame( time=as.integer(time(mod1)), val=as.matrix(mod1) )
mod1 <- seq(1, 1000) * 0.5 + 10
mod1 <-ts(mod1)
mod1 <- data.frame( time=as.Date( as.integer(time(mod1))) , val=as.matrix(mod1) )
ggplot(data=mod2, mapping=aes(x=date, y=val))+geom_point()
mod1 <- data.frame( time= as.integer(time(mod1)) , val=as.matrix(mod1) )
mod1 <- data.frame( time=as.Date( time(mod1) ) , val=as.matrix(mod1) )
mod1 <- seq(1, 1000) * 0.5 + 10
mod1 <-ts(mod1)
as.Date.numeric(time(mod1))
as.Date.numeric(as.integer(time(mod1)))
mod1 <- data.frame( x= as.integer(time(mod1)) , val=as.matrix(mod1) )
mod1 <- seq(1, 1000) * 0.5 + 10
mod1 <-ts(mod1)
mod1 <- data.frame( x=as.integer(time(mod1)), y=as.matrix(mod1) )
# Generate a random walk without drift
randwalk=cumsum(rand_draw)
randwalk=ts(randwalk)
mod2 <- data.frame( x=as.integer(time(mod2)), y=as.matrix(randwalk) )
# Generate a Random walk with drift = 0.5
randwalk_d = 0.5 + rand_draw;
randwalk_d = cumsum(randwalk_d)
mod3 <- data.frame( x=as.yearqtr(time(randwalk_d)), val=as.matrix(randwalk_d) )
mod2 <- data.frame( x=as.integer(time(randwalk)), y=as.matrix(randwalk) )
mod1 <- seq(1, 1000) * 0.5 + 10
mod1 <-ts(mod1)
mod1 <- data.frame( x=as.integer(time(mod1)), y=as.matrix(mod1) )
# Generate a random walk without drift
randwalk=cumsum(rand_draw)
randwalk=ts(randwalk)
mod2 <- data.frame( x=as.integer(time(randwalk)), y=as.matrix(randwalk) )
# Generate a Random walk with drift = 0.5
randwalk_d = 0.5 + rand_draw;
randwalk_d = cumsum(randwalk_d)
mod3 <- data.frame( x=as.yearqtr(time(randwalk_d)), val=as.matrix(randwalk_d) )
randwalk_d = 0.5 + rand_draw;
randwalk_d = cumsum(randwalk_d)
mod3 <- data.frame( x=as.yearqtr(time(randwalk_d)), y=as.matrix(randwalk_d) )
ggplot(mod1,aes(x,y)) +
geom_line(aes(color="deterministic trend")) +
geom_line(data=mod2,aes(color="random walk without drift")) +
geom_line(data=mod3,aes(color="Random walk with drift=0.5")) +
labs(color="Legend") +
scale_colour_manual("", breaks = c("deterministic trend", "random walk without drift","Random walk with drift=0.5"),
values = c("black", "blue", "red")) +
ggtitle("Random Walk with Drift, Random Walk without Drift & Deterministic Trend") +
theme(plot.title = element_text(lineheight=.7, face="bold")) +
labs(y = "Simulated Values from Three Models ")
hist(mod1)
hist(randwalk_d)
qplot(Line_trend, geom="histogram",  main='Histogram of Deterministic trend', ylab='Frequency',
xlab='Simulated Values', colour = I('dodgerblue3'), fill = I("white") )
Linear_trend <- seq(1, 1000) * 0.5 + 10
Linear_trend <-ts(Linear_trend)
mod1 <- data.frame( x=as.integer(time(Linear_trend)), y=as.matrix(Linear_trend) )
qplot(Linear_trend, geom="histogram",  main='Histogram of Deterministic trend', ylab='Frequency',
xlab='Simulated Values', colour = I('dodgerblue3'), fill = I("white") )
Linear_trend <- seq(1, 1000) * 0.5 + 10
qplot(Linear_trend, geom="histogram",  main='Histogram of Deterministic trend', ylab='Frequency',
+       xlab='Simulated Values', colour = I('dodgerblue3'), fill = I("white") )
qplot(Linear_trend, geom="histogram")
qplot(Linear_trend, geom="histogram",  main='Histogram of Deterministic trend', ylab='Frequency',
xlab='Simulated Values', colour = I('dodgerblue3'), fill = I("white") )
qplot(randwalk, geom="histogram",  main='Histogram of Deterministic trend', ylab='Frequency',
xlab='Simulated Values', colour = I('dodgerblue3'), fill = I("white") )
qplot(randwalk_d, geom="histogram",  main='Histogram of Deterministic trend', ylab='Frequency',
xlab='Simulated Values', colour = I('dodgerblue3'), fill = I("white") )
install.packages("GGally")
